{"name":"Neonetwork","tagline":"NeoNetwork is a class library to provide a simple access to Unity3D's networking stack","body":"# NeoNetwork: A class library very simple network operations for `Unity3D`\r\n\r\nNeoNetwork is a class library to provide a simple access to Unity3D's networking stack.\r\n\r\n## Installation\r\n\r\nIf you don't have access to [Microsoft VisualStudio](http://msdn.microsoft.com/de-de/vstudio) you can just use Unity3D and its compiler.\r\nOr use your VisualStudio installation in combination with [Visual Studio Tools for Unity](http://unityvs.com) to compile a DLL-file, which\r\ncan be included into your project.\r\n\r\n### Using Unity3D\r\n\r\n* Clone the repository\r\n* Copy the files from `Assets\\NeoNetwork` into your project\r\n\r\n### Using VisualStudio\r\n\r\n* Clone the repository\r\n* Open the folder as a Unity3D project\r\n* Install the *free* [Unity Testing Tools](https://www.assetstore.unity3d.com/#/content/13802) from the AssetStore\r\n* Install the *free* [Visual Studio Tools for Unity](http://unityvs.com) and import its Unity-package\r\n* Open `UnityVS.NeoNetWork.sln`\r\n* [Build a DLL-File](http://forum.unity3d.com/threads/video-tutorial-how-to-use-visual-studio-for-all-your-unity-development.120327)\r\n* Import the DLL into your Unity3D project\r\n\r\n## Dependencies\r\n\r\n* [NeoCollections](https://github.com/jnbt/NeoCollections)\r\n* [NeoLogging](https://github.com/jnbt/NeoLogging)\r\n* [NeoAsync](https://github.com/jnbt/NeoAsync)\r\n\r\n## Usage\r\n\r\nThis library separates between the concept of a HTTP client and a HTTP request performer. The client acts as a facade to simplify the complexity of HTTP communication. The actual request performer must implement the `IRequestPerformer` interface. \r\nIn the simplest usage one you simple instrument the provided `UnityRequestPerformer` which uses the native Unity provided [`UnityEngine.WWW`](http://docs.unity3d.com/ScriptReference/WWW.html) class.\r\n\r\n```csharp\r\nvar factory = new UnityRequestPerformerFactory();\r\n\r\nvar client = new Client(factory);\r\n\r\nclient.Get(\"http://www.neopoly.com\", response => UnityEngine.Debug.Log(response.Body));\r\n```\r\n\r\nAs the `UnityEngine.WWW` doesn't support the concept of cookies the `Client` will create an own `ICookieJar` to support them. You can also use a shared \r\nCookieJar if needed:\r\n\r\n```csharp\r\nvar factory = new UnityRequestPerformerFactory();\r\nvar cookies = new CookieJar();\r\n\r\nvar client1 = new Client(factory, cookies);\r\nvar client2 = new Client(factory, cookies);\r\n\r\n// Getting a session via a cookie\r\nvar data = new Dictionary<string, string>(){\r\n  {\"username\", \"foo\"},\r\n  {\"password\", \"boo\"}\r\n};\r\nclient1.Post(\"http://www.neopoly.com/login\", data, response => UnityEngine.Debug.Log(response.Body));\r\n\r\n// Use the same cookie for a second client\r\nclient2.Get(\"http://www.neopoly.com\", response => UnityEngine.Debug.Log(response.Body));\r\n```\r\n\r\n## Limitations\r\n\r\n* At the moment cookies are parsed from the response's header but don't respect the bounded domain. So they will be sent to any host.\r\n* Due the decision from Unity to return the HTTP response headers as a `Dictionary<string, string>` only one `Set-Cookie` field can be respected per response.\r\n\r\n\r\n## Testing\r\n\r\nYou can run the tests using the offical [Unity Testing Tools](https://www.assetstore.unity3d.com/#/content/13802). Just install the Unity package and use the [Unit Test Runner](http://www.tallior.com/introduction-to-unity-test-tools/).\r\n\r\n## TODO\r\n\r\n* Support domain-based cookies\r\n\r\n## Licenses\r\n\r\nFor the license of this project please have a look at LICENSE.txt","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}